name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race ./...

    - name: Generate coverage report
      if: matrix.os == 'ubuntu-latest'
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//g' > coverage-percent.txt
        echo "coverage=$(cat coverage-percent.txt)" >> $GITHUB_OUTPUT
      id: coverage

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-

    - name: Run fmt check
      run: |
        if [ -n "$(go fmt ./...)" ]; then
          echo "Some files are not formatted. Please run 'make fmt'"
          exit 1
        fi

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: v2.1
        args: --timeout=5m

  security:
    name: Security
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-

    - name: Install and run vulnerability check
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    # mainブランチにマージされた時のみE2Eテストを実行（rate limit対策）
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-

    - name: Download dependencies
      run: go mod download

    - name: Run E2E tests
      env:
        TODOIST_API_TOKEN: ${{ secrets.TODOIST_API_TOKEN }}
      run: |
        if [ -z "$TODOIST_API_TOKEN" ]; then
          echo "TODOIST_API_TOKEN secretが設定されていないため、E2Eテストをスキップします"
          exit 0
        fi
        make test-e2e

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint, security]

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-

    - name: Build binary
      run: make build

    - name: Test binary
      run: ./gotodoist --help

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gotodoist-linux-amd64
        path: gotodoist
